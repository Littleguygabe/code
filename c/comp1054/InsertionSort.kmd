KMD
00000000: EA00000A    ; B       test_insert
00000004:             ; 
00000004:             ; ; You may want to try some of these different arrays to check your insertion sort really works
00000004:             ; ;tis_array      DEFW    2,6,4,6,2,1,1,3,2
00000004:             ; ;tis_array      DEFW    1,2,3,4,5,6,7,8,9
00000004: 00000009    ; tis_array       DEFW    9,8,7,6,5,4,3,2,1
00000008: 00000008    ; 
0000000C: 00000007    ; 
00000010: 00000006    ; 
00000014: 00000005    ; 
00000018: 00000004    ; 
0000001C: 00000003    ; 
00000020: 00000002    ; 
00000024: 00000001    ; 
00000028:             ; ;tis_array      DEFW    9,2,1,4,3,6,5,8,7
00000028:             ; 
00000028: 0A 00       ; nl              DEFB    "\n",0
0000002A: 20 20 00    ; space   DEFB    "  ",0
0000002D:             ; 
00000030:             ;                 ALIGN
00000030:             ; 
00000030:             ; test_insert
00000030: E24F0034    ;                 ADRL    R0,tis_array
00000034: E3A01009    ;                 MOV             R1,#9
00000038: EB00000B    ;                 BL              InsertionSort
0000003C:             ; 
0000003C: E3A02000    ;                 MOV             R2,#0
00000040: E3A03009    ;                 MOV             R3,#9
00000044: E24F1048    ;                 ADRL    R1,tis_array
00000048: EA000004    ;                 B               tis_cond
0000004C:             ; tis_loop
0000004C: E7910102    ;                 LDR             R0, [R1, R2 LSL #2]
00000050: EF000004    ;                 SWI             4
00000054: E3A0000A    ;                 MOV             R0,#10
00000058: EF000000    ;                 SWI             0
0000005C: E2822001    ;                 ADD             R2,R2,#1
00000060:             ; tis_cond
00000060: E1520003    ;                 CMP             R2,R3
00000064: BAFFFFF8    ;                 BLT             tis_loop
00000068:             ; 
00000068: EF000002    ;                 SWI             2
0000006C:             ; 
0000006C:             ; 
0000006C:             ; ; InsertionSort -- should sort the array using the Insertion sort algorithm
0000006C:             ; ; R0 -> array, R1 -> number of elems in array
0000006C:             ; 
0000006C:             ; InsertionSort
0000006C:             ; 
0000006C:             ; ;; Insert your code here
0000006C: E1A05000    ;         MOV R5,R0 ;; base address for inner loop logic to add value to 
00000070:             ; 
00000070:             ;         ;SUB R5,R5,#4 ; remove to start at 2nd element
00000070:             ; 
00000070:             ;         ;ADD R0,R0,#1 ;start from the second element as the first is always sorted when size is
                      ;  1
00000070: E3A02000    ;         MOV R2,#0
00000074:             ; 
00000074:             ; outerloop
00000074: E1520001    ;         CMP R2,R1
00000078: 0A00000F    ;         BEQ end ;;to start at 2nd element change to BEQ/BGT start at 1st element
0000007C:             ;         ;; logic goes here
0000007C:             ; 
0000007C: E1A04002    ;         MOV R4,R2
00000080:             ; 
00000080:             ;         ;;get the address of the current outer element
00000080: E0857102    ;         ADD R7,R5,R2 LSL #2
00000084: E5579000    ;         LDRB R9,[R7]
00000088:             ; 
00000088:             ;         ;LDRB R0,[R7] ;DEBUGGING
00000088:             ;         ;SWI 4 ; EDBUGGING
00000088:             ; 
00000088:             ;         ;ADRL R0, space ; DEBUGGING
00000088:             ;         ;SWI 3 ; DEBUGGING
00000088:             ; 
00000088:             ; innerLoop
00000088: E3540000    ;         CMP R4,#0
0000008C: 0A000008    ;         BEQ endinner
00000090:             ; 
00000090:             ; ;;INNER loop logic goes here
00000090: E0856104    ;         ADD R6,R5,R4 LSL #2 ; 
00000094:             ;         ;LDRB R0,[R6] ; DEBUGGING
00000094:             ;         ;SWI 4 ;DEBUGGING
00000094:             ; 
00000094: E5568000    ;         LDRB R8,[R6]
00000098:             ; 
00000098: E1580009    ;         CMP R8,R9
0000009C: CA000001    ;         BGT swapVal
000000A0:             ; 
000000A0:             ; ;; 
000000A0:             ; ndIn
000000A0: E2444001    ;         SUB R4,R4,#1
000000A4: EAFFFFF7    ;         B innerLoop
000000A8:             ;         ;;
000000A8:             ; 
000000A8:             ; swapVal
000000A8: E5078000    ;         STR R8,[R7]
000000AC: E5069000    ;         STR R9,[R6]
000000B0:             ; 
000000B0: EAFFFFFA    ;         B ndIn
000000B4:             ; 
000000B4:             ; endinner
000000B4:             ;         
000000B4:             ;         ;ADRL R0,nl ;; for debugging
000000B4:             ;         ;SWI 3          ; for debugging
000000B4:             ; 
000000B4: E2822001    ;         ADD R2,R2,#1
000000B8: EAFFFFED    ;         B outerloop
000000BC:             ; 
000000BC:             ; end
000000BC:             ; 
000000BC: E12FFF1E    ;         BX LR
000000C0:             ; 
000000C0:             ; 
000000C0:             ; 
000000C0:             ; 

Symbol Table: Labels
: tis_array                         00000004  Local -- ARM
: nl                                00000028  Local -- ARM
: space                             0000002A  Local -- ARM
: test_insert                       00000030  Local -- ARM
: tis_loop                          0000004C  Local -- ARM
: tis_cond                          00000060  Local -- ARM
: InsertionSort                     0000006C  Local -- ARM
: outerloop                         00000074  Local -- ARM
: innerLoop                         00000088  Local -- ARM
: ndIn                              000000A0  Local -- ARM
: swapVal                           000000A8  Local -- ARM
: endinner                          000000B4  Local -- ARM
: end                               000000BC  Local -- ARM
